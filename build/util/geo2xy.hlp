{smcl}
{* *! version 1.0.1  15aug2015}{...}
{cmd:help geo2xy}
{hline}

{title:Title}

{phang}
{bf:geo2xy} {hline 2} Convert latitude and longitude to cartesian (x,y) coordinates using map projections


{title:Syntax}

{p 8 16 2}
{cmd:geo2xy}
{it:lat_var lon_var} 
{ifin} 
{cmd:,}
{c -(}{opt gen:erate(y_lat x_lon)}{c |}{opt replace}{c )-}
[ 
{opt proj:ection}{cmd:(}{help geo2xy##proj_name:proj_name}
[,{help geo2xy##proj_name:proj_opts}]{cmd:)}
{opt ti:ssot} ]


{synoptset 36 tabbed}{...}
{synopthdr}
{synoptline}
{p2coldent :* {opt gen:erate(y_lat x_lon)}}New variable names for the projected coordinates (note the order!){p_end}
{p2coldent :* {opt replace}}Replace the values in {it:lat_var lon_var} with the projected coordinates{p_end}
{synopt :{opt proj:ection(proj_name [,proj_opts])}}Specifies a projection and, optionally, projection parameters{p_end}
{synopt :{opt ti:ssot}}Append Tissot's indicatrix (grid of circles){p_end}
{synoptline}
{pstd}* Either {opt gen:erate(y_lat x_lon)} or {opt replace} is required.
{p2colreset}


{marker proj_name}{...}
{pstd}
The following projections are currently supported (click on the projection
name for projection-specific help):

{synoptset 32 tabbed}{...}
{synopthdr :Projection names}
{synoptline}
{synopt :{help geo2xy_proj##web_mercator:web_mercator}}Web Mercator projection - Spherical model{p_end}
{synopt :{help geo2xy_proj##mercator_sphere:mercator_sphere}}Mercator projection - Spherical model{p_end}
{synopt :{help geo2xy_proj##mercator:mercator}}Mercator projection - Ellipsoid model{p_end}
{synopt :{help geo2xy_proj##equidistant_cylindrical:equidistant_cylindrical}}Equidistant Cylindrical projection - Spherical model{p_end}
{synopt :{help geo2xy_proj##albers_sphere:albers_sphere}}Albers Equal-Area Conic Projection - Spherical model{p_end}
{synopt :{help geo2xy_proj##albers:albers}}Albers Equal-Area Conic Projection - Ellipsoid model{p_end}
{synopt :{help geo2xy_proj##picard:picard}}Picard's variant of the Equidistant Cylindrical projection - Spherical model{p_end}
{synoptline}
{p2colreset}{...}


{title:Description}

{pstd}
{cmd:geo2xy} transforms the geographic coordinates stored in the variables 
{it:lat_var} and {it:lon_var}
to Cartesian (x,y) coordinates using a map projection transformation. 
Input coordinates must be in signed decimal degrees, 
positive for north and east, and negative for south and west. Latitudes 
range from -90 to 90 and longitudes from -180 to 180.

{pstd}
If no projection is specified, {cmd:geo2xy} will apply a {opt web_mercator}
projection. This is the same projection that most web mapping applications 
(Google Maps, Bing Maps, etc.) use. See the specific {help geo2xy##proj_name:projection} help entries
for more details.

{pstd}
All projections distort the location of features on the map in some way.
The {opt ti:ssot} option provides a convenient way to visualize these
distorsions by overlaying a grid of circles with identical radii (Tissot's indicatrix)
over the area of the map. 
With conformal projections (e.g. Mercator), the projected circles
retain their shape but their sizes increase towards the poles.
With equal-area projections (e.g. Albers Equal-Area Conic Projection),
the area of the projected circles is constant 
(which make them well-suited for choropleth maps)
but their shapes may appear distorted.
The Equidistant Cylindrical projection (and my Picard variant) are neither
conformal nor equal-area projections so the shape and size of each
circle will vary.

{pstd}
{cmd:geo2xy} cannot be used to convert projected coordinates
back to geographic latitude and longitude or to convert from
one projection to another.


{title:A note about shapefiles}

{pstd}
A {browse "http://en.wikipedia.org/wiki/Shapefile":shapefile} 
is a spatial data format that describes geographic features using points, lines, and polygons. 
A {browse "http://en.wikipedia.org/wiki/Shapefile":shapefile} is a collection
of files, none of which can be easily imported into Stata.
The user-written command {cmd:shp2dta}
(from SSC, {it:{stata ssc install shp2dta:click to install}})
can extract from a {browse "http://en.wikipedia.org/wiki/Shapefile":shapefile} 
the geographic coordinates of each feature (the coordinates dataset)
and the feature's attributes (the database dataset, with one observation
per feature). {cmd:shp2dta} does not import the 
{browse "http://en.wikipedia.org/wiki/Shapefile":shapefile}'s
metadata but files with a ".prj" or 
".xml" extension are in plain text format and can be viewed easily with
a text editor.


{title:Stored results}

{pstd}
{cmd:geo2xy} stores the following in {cmd:r()} for all projections:

{synoptset 20 tabbed}{...}
{p2col 5 20 24 2: Macros}{p_end}
{synopt:{cmd:r(ratio)}}aspect ratio to use when creating a map using Stata's graph commands{p_end}
{synopt:{cmd:r(model)}}spheroid model for the projection{p_end}
{synopt:{cmd:r(pname)}}full name of the projection{p_end}
{p2colreset}{...}
{pstd}

{pstd}
Additional projection-specific results are also returned. See
the projection's {help geo2xy##proj_name:help} entry for more detail.


{title:Examples}

{pstd}
To illustrate various map projections, we use data from a 
U.S. Census shapefile of state boundaries.
The shapefile was processed by the user-written command {cmd:shp2dta}
(from SSC, {it:{stata ssc install shp2dta:click to install}}).
Before you can try the examples below, you must first
download the database and coordinates datasets generated by {cmd:shp2dta}
to the current directory.
{it:{stata net get geo2xy:Click here to download}}

{pstd}
If you try to map unprojected coordinates, you get a map with 
recognizable features, but their respective proportions are wrong. The 
following example uses {cmd:spmap}
(from SSC, {it:{stata ssc install spmap:click to install}})
to create a map of the state of Michigan:

        {cmd}. use "geo2xy_us_data.dta", clear
        
        . spmap if _ID == 44 using "geo2xy_us_coor.dta", id(_ID){txt}
         {it:({stata geo2xy_examples ex1:click to run})}

{pstd}
Redo using projected coordinates (the default {cmd:geo2xy} projection
is the same projection that is used by Google Maps
and many other web mapping applications):

        {cmd}. use "geo2xy_us_coor.dta", clear
        
        . geo2xy _Y _X, replace
        
        . save "geo2xy_us_coor_google.dta", replace
        
        . use "geo2xy_us_data.dta", clear
        
        . spmap if _ID == 44 using "geo2xy_us_coor_google.dta", id(_ID){txt}
         {it:({stata geo2xy_examples ex2:click to run})}

{pstd}
You can also use Stata's graph commands to produce a map. 
In the coordinates dataset, a polygon starts with an observation
where the coordinates are missing. That's followed by an observation
for each point in the polygon. The polygon's last point has
the same coordinates as the first non-missing point, which closes the
polygon. In the following example, the polygons are drawn using
{help line} and the {opt cmissing(n)} connect option is used to prevent
Stata from connecting consecutive polygons. The {opt aspectratio()} option
is used to specify the map's aspect ratio and the
correct value is returned by {cmd:geo2xy}.

        {cmd}. use "geo2xy_us_coor.dta", clear
        
        . geo2xy _Y _X if _ID == 44, gen(ylat xlon)
        
        . return list
        
        . line ylat xlon, lwidth(vthin) lcolor(gray) cmissing(n) ///
			ylabel(minmax, nogrid) yscale(off) xlabel(minmax, nogrid) xscale(off) ///
			aspectratio(`r(aspect)') legend(off){txt}
         {it:({stata geo2xy_examples ex3:click to run})}

{pstd}
It's hard to understand the distortions generated by a map projection transformation
just by looking at the map produced. The {opt tissot} option
appends a series of polygons that approximate the shape of circles.
The center points for these polygons are located on a coordinate grid
and the same radius is used for all circles. All {opt tissot} polygon points are
at same great-circle distance from their circle's center point.
The {opt tissot} polygons generated by {cmd:geo2xy} do not have a feature
identifier (e.g. {it:_ID} is missing)

        {cmd}. use "geo2xy_us_coor.dta", clear
        
        . drop if inlist(_ID, 55,54,32,28,29,37,40) // Alaska, Hawaii, territories
        
        . geo2xy _Y _X , gen(ylat xlon) tissot
        
        . return list
        
        . line ylat xlon if !mi(_ID), lwidth(vthin) lcolor(gray) cmissing(n) || ///
			line ylat xlon if mi(_ID), lwidth(vthin) lcolor(eltblue) cmissing(n) ///
			ylabel(minmax, nogrid) yscale(off) xlabel(minmax, nogrid) xscale(off) ///
			aspectratio(`r(aspect)') legend(off){txt}
         {it:({stata geo2xy_examples ex4:click to run})}

{pstd}
As you can see, the projection used by Google et al. (Spherical Mercator)
is conformal (i.e. circles are not distorted) but they get bigger towards
the north. The conterminous 48 states are often represented using
the Albers Equal-Area projection:

        {cmd}. use "geo2xy_us_coor.dta", clear
        
        . drop if inlist(_ID, 55,54,32,28,29,37,40) // Alaska, Hawaii, territories
        
        . geo2xy _Y _X , gen(ylat xlon) proj(albers)
        
        . return list
        
        . line ylat xlon, lwidth(vthin) lcolor(gray) cmissing(n) ///
			ylabel(minmax, nogrid) yscale(off) xlabel(minmax, nogrid) xscale(off) ///
			aspectratio(`r(aspect)') legend(off){txt}
         {it:({stata geo2xy_examples ex5:click to run})}
         {it:({stata geo2xy_examples ex5t:click to run with Tissot's indicatrix})}

{pstd}
The {cmd:picard} projection is what I have been using for the last 
several years to create maps in Stata. It's a variant of the 
Equidistant Cylindrical projection. It
leaves the coordinates unchanged and reduces the transformation
to a single parameter that adjusts
the aspect ratio of the map in proportion to the horizontal distance at mid-latitude.
One advantage is that you can use geographic latitudes and longitudes 
directly when plotting the map. In the following example,
a crosshair is plotted using the coordinates of the Washington Monument
in Washington, DC. 

        {cmd}. use "geo2xy_us_coor.dta", clear
        
        . drop if inlist(_ID, 55,54,32,28,29,37,40) // Alaska, Hawaii, territories
        
        . geo2xy _Y _X , gen(ylat xlon) proj(picard)
        
        . return list
        
        . line ylat xlon, lwidth(vthin) lcolor(gray) cmissing(n) ///
			ylabel(minmax, nogrid) yscale(off) xlabel(minmax, nogrid) xscale(off) ///
			aspectratio(`r(aspect)') legend(off) ///
			xline(-77.035279, lstyle(grid)) yline(38.889689, lstyle(grid)){txt}
         {it:({stata geo2xy_examples ex6:click to run})}
         {it:({stata geo2xy_examples ex6t:click to run with Tissot's indicatrix})}
         
{pstd}
With Google Maps, distortions are more extreme near the poles. Here's an
example using a map of Alaska. Because the state spans the international date line, we 
need to shift the longitudes.

        {cmd}. use "geo2xy_us_coor.dta", clear
        
        . keep if _ID ==37
        
        . gen double _XX = cond(_X > 0, _X - 180, _X + 180)
        
        . geo2xy _Y _XX , gen(ylat xlon)
        
        . return list
        
        . line ylat xlon, lwidth(vthin) lcolor(gray) cmissing(n) ///
			ylabel(minmax, nogrid) yscale(off) xlabel(minmax, nogrid) xscale(off) ///
			aspectratio(`r(aspect)') legend(off){txt}
         {it:({stata geo2xy_examples ex7:click to run})}
         {it:({stata geo2xy_examples ex7t:click to run with Tissot's indicatrix})}

{pstd}
Redo using the Albers Equal Area Conic projection. The USGS
recommends using 55 and 65 as standard parallels but {cmd:geo2xy} is pretty
good at choosing a close equivalent using default
{help geo2xy_proj##albers:Albers projection parameters}
(see the returned r(lat1) and r(lat2) values)

        {cmd}. use "geo2xy_us_coor.dta", clear
        
        . keep if _ID ==37
        
        . gen double _XX = cond(_X > 0, _X - 180, _X + 180)
        
        . geo2xy _Y _XX , gen(ylat xlon) proj(albers)
        
        . return list
        
        . line ylat xlon if !mi(_ID), lwidth(vthin) lcolor(gray) cmissing(n) || ///
			line ylat xlon if mi(_ID), lwidth(vthin) lcolor(eltblue) cmissing(n) ///
			aspectratio(`r(aspect)') legend(off){txt}
         {it:({stata geo2xy_examples ex8:click to run})}
         {it:({stata geo2xy_examples ex8t:click to run with Tissot's indicatrix})}


{title:References and acknowledgements}
        
{pstd}
The U.S. state boundaries datasets distributed with
this package were generated by {cmd:shp2dta}
(from SSC, {it:{stata ssc install shp2dta:click to install}}) using
the {it:2013 Cartographic Boundary File, State for United States, 1:500,000}
shapefile distributed by the U.S. Census Bureau and available from
{it:{browse "http://www.census.gov/geo/maps-data/data/cbf/cbf_state.html":Cartographic Boundary Shapefiles - States}}.
The xml in the shapefile includes the statement: "These products are 
free to use in a product or publication, 
however acknowledgement must be given to the U.S. Census Bureau as the source."
        
{pstd}
The formula for calculating a destination point using an initial bearing and
distance comes from 
{it:{browse "http://www.movable-type.co.uk/scripts/latlong.html":Latitude/longitude spherical geodesy formulae & scripts}}
by Chris Veness.

{pstd}
Snyder, John P., {it:Map projections: A working manual.}
U.S. Geological Survey Professional Paper 1395, 1987.
Available from {it:{browse "http://pubs.er.usgs.gov/publication/pp1395":here}}.

{pstd}
The idea of incorporating Tissot's indicatrix comes from the 
{it:{browse "http://en.wikipedia.org/wiki/Map_projection":Map projection}}
and
{it:{browse "http://en.wikipedia.org/wiki/Tissot's_indicatrix":Tissot's indicatrix}}
articles on Wikipedia.

{pstd}
Thanks to Luca Aguzzoni who asked about
{browse "http://www.statalist.org/forums/forum/general-stata-discussion/general/989012-spmap-guidance-is-it-possible-to-draw-circles-around-dot":drawing circles on a map}
on Statalist.
My proof of concept solution evolved into {cmd:geocircles}
which begs for map projections in Stata. This led to {cmd:geo2xy},
which then, keeping with the circle theme, led to the Tissot's indicatrix option.


{title:Author}

{pstd}Robert Picard{p_end}
{pstd}picard@netbox.com{p_end}


{title:Also see}

{psee}
SSC:  {stata "ssc des geocircles":geocircles}, {stata "ssc des geodist":geodist}, {stata "ssc des geonear":geonear},
{stata "ssc des shp2dta":shp2dta}, {stata "ssc des spmap":spmap}, {stata "ssc des mergepoly":mergepoly},
{stata "ssc des maptile":maptile}
{p_end}
